
#create redshift table

CREATE TABLE flights (
  year           smallint,
  month          smallint,
  day            smallint,
  carrier        varchar(80) DISTKEY,
  origin         char(3),
  dest           char(3),
  aircraft_code  char(3),
  miles          int,
  departures     int,
  minutes        int,
  seats          int,
  passengers     int,
  freight_pounds int
);

# load data from S3 to RedShift Table

COPY flights
FROM 's3://us-west-2-aws-training/awsu-spl/spl-17/4.2.7.prod/data/flights-usa'
IAM_ROLE 'arn:aws:iam::142035583081:role/Redshift-Role'
GZIP
DELIMITER ','
REMOVEQUOTES
REGION 'us-west-2';




SELECT COUNT(*) FROM flights;


SELECT *
FROM flights
ORDER BY random()
LIMIT 10;


SELECT
  carrier,
  SUM (departures)
FROM flights
GROUP BY carrier
ORDER BY 2 DESC
LIMIT 10;


SELECT
  carrier,
  SUM (miles)
FROM flights
GROUP BY carrier
ORDER BY 2 DESC
LIMIT 10;

SELECT
  carrier,
  SUM (passengers * miles)
FROM flights
GROUP BY carrier
ORDER BY 2 DESC
LIMIT 10;



SELECT
  carrier,
  SUM (freight_pounds)
FROM flights
GROUP BY carrier
ORDER BY 2 DESC
LIMIT 10;

CREATE TABLE aircraft (
  aircraft_code CHAR(3) SORTKEY,
  aircraft      VARCHAR(100)
);


COPY aircraft
FROM 's3://us-west-2-aws-training/awsu-spl/spl-17/4.2.7.prod/data/lookup_aircraft.csv'
IAM_ROLE 'arn:aws:iam::142035583081:role/Redshift-Role'
IGNOREHEADER 1
DELIMITER ','
REMOVEQUOTES
TRUNCATECOLUMNS
REGION 'us-west-2';


SELECT *
FROM aircraft
ORDER BY random()
LIMIT 10;


SELECT
  aircraft,
  SUM(departures) AS trips
FROM flights
JOIN aircraft using (aircraft_code)
GROUP BY aircraft
ORDER BY trips DESC
LIMIT 10;

# Use EXPLAIN command to view how Amazon Redshift processes

SET enable_result_cache_for_session TO OFF;

EXPLAIN
SELECT
  aircraft,
  SUM(departures) AS trips
FROM flights
JOIN aircraft using (aircraft_code)
GROUP BY aircraft
ORDER BY trips DESC
LIMIT 10;


XN Limit (cost=1000156830987.88..1000156830987.90 rows=10 width=29)
 -> XN Merge (cost=1000156830987.88..1000156830988.84 rows=383 width=29)
  Merge Key: sum(flights.departures)
  -> XN Network (cost=1000156830987.88..1000156830988.84 rows=383 width=29)
    Send to leader
    -> XN Sort (cost=1000156830987.88..1000156830988.84 rows=383 width=29)
     Sort Key: sum(flights.departures)
     -> XN HashAggregate (cost=156830970.49..156830971.44 rows=383 width=29)
       -> XN Hash Join DS_BCAST_INNER (cost=4.79..156346841.73 rows=96825752 width=29)
        Hash Cond: ("outer".aircraft_code = "inner".aircraft_code)
        -> XN Seq Scan on flights (cost=0.00..968257.52 rows=96825752 width=11)
        -> XN Hash (cost=3.83..3.83 rows=383 width=32)
          -> XN Seq Scan on aircraft (cost=0.00..3.83 rows=383 width=32)
		  
		  
# Display recommended compression settings for this table
		  
ANALYZE COMPRESSION flights;		  
		  
# Byte Dictionary
# Delta
# LZO
# Mostly
# Run-length
# Text
# ZStandard
# Raw

CREATE TABLE airports (
  airport_code CHAR(3) SORTKEY,
  airport      varchar(100)
);


COPY airports
FROM 's3://us-west-2-aws-training/awsu-spl/spl-17/4.2.7.prod/data/lookup_airports.csv'
IAM_ROLE 'arn:aws:iam::142035583081:role/Redshift-Role'
IGNOREHEADER 1
DELIMITER ','
REMOVEQUOTES
TRUNCATECOLUMNS
REGION 'us-west-2';


CREATE TABLE vegas_flights
  DISTKEY (origin)
  SORTKEY (origin)
AS
SELECT
  flights.*,
  airport
FROM flights
JOIN airports ON origin = airport_code
WHERE dest = 'LAS';


SELECT
  airport,
  to_char(SUM(passengers), '999,999,999') as passengers
FROM vegas_flights
GROUP BY airport
ORDER BY SUM(passengers) desc
LIMIT 10;

# check how much disk capacity used

SELECT
  owner AS node,
  diskno,
  used,
  capacity,
  used/capacity::numeric * 100 as percent_used
FROM stv_partitions
WHERE host = node


# how much space taken by each of data tables

SELECT
  name,
  count(*)
FROM stv_blocklist
JOIN (SELECT DISTINCT name, id as tbl from stv_tbl_perm) USING (tbl)
GROUP BY name;
ORDER BY 1, 2;
